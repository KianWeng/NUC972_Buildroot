.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.16)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BUSYBOX 1"
.TH BUSYBOX 1 "2014-07-24" "version 1.22.1" "busybox"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
BusyBox \- The Swiss Army Knife of Embedded Linux
.SH "SYNTAX"
.IX Header "SYNTAX"
.Vb 1
\& busybox <applet> [arguments...]  # or
\&
\& <applet> [arguments...]          # if symlinked
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
BusyBox combines tiny versions of many common \s-1UNIX\s0 utilities into a single
small executable. It provides minimalist replacements for most of the utilities
you usually find in \s-1GNU\s0 coreutils, util-linux, etc. The utilities in BusyBox
generally have fewer options than their full-featured \s-1GNU\s0 cousins; however, the
options that are included provide the expected functionality and behave very
much like their \s-1GNU\s0 counterparts.
.PP
BusyBox has been written with size-optimization and limited resources in mind.
It is also extremely modular so you can easily include or exclude commands (or
features) at compile time. This makes it easy to customize your embedded
systems. To create a working system, just add /dev, /etc, and a Linux kernel.
BusyBox provides a fairly complete \s-1POSIX\s0 environment for any small or embedded
system.
.PP
BusyBox is extremely configurable.  This allows you to include only the
components you need, thereby reducing binary size. Run 'make config' or 'make
menuconfig' to select the functionality that you wish to enable.  Then run
\&'make' to compile BusyBox using your configuration.
.PP
After the compile has finished, you should use 'make install' to install
BusyBox. This will install the 'bin/busybox' binary, in the target directory
specified by \s-1CONFIG_PREFIX\s0. \s-1CONFIG_PREFIX\s0 can be set when configuring BusyBox,
or you can specify an alternative location at install time (i.e., with a
command line like 'make CONFIG_PREFIX=/tmp/foo install'). If you enabled
any applet installation scheme (either as symlinks or hardlinks), these will
also be installed in the location pointed to by \s-1CONFIG_PREFIX\s0.
.SH "USAGE"
.IX Header "USAGE"
BusyBox is a multi-call binary.  A multi-call binary is an executable program
that performs the same job as more than one utility program.  That means there
is just a single BusyBox binary, but that single binary acts like a large
number of utilities.  This allows BusyBox to be smaller since all the built-in
utility programs (we call them applets) can share code for many common
operations.
.PP
You can also invoke BusyBox by issuing a command as an argument on the
command line.  For example, entering
.PP
.Vb 1
\&        /bin/busybox ls
.Ve
.PP
will also cause BusyBox to behave as 'ls'.
.PP
Of course, adding '/bin/busybox' into every command would be painful.  So most
people will invoke BusyBox using links to the BusyBox binary.
.PP
For example, entering
.PP
.Vb 2
\&        ln \-s /bin/busybox ls
\&        ./ls
.Ve
.PP
will cause BusyBox to behave as 'ls' (if the 'ls' command has been compiled
into BusyBox).  Generally speaking, you should never need to make all these
links yourself, as the BusyBox build system will do this for you when you run
the 'make install' command.
.PP
If you invoke BusyBox with no arguments, it will provide you with a list of the
applets that have been compiled into your BusyBox binary.
.SH "COMMON OPTIONS"
.IX Header "COMMON OPTIONS"
Most BusyBox applets support the \fB\-\-help\fR argument to provide a terse runtime
description of their behavior.  If the \s-1CONFIG_FEATURE_VERBOSE_USAGE\s0 option has
been enabled, more detailed usage information will also be available.
.SH "COMMANDS"
.IX Header "COMMANDS"
Currently available applets include:
.PP
.Vb 6
\&        ash, bash, cat, cp, cut, date, depmod, df, dos2unix, echo, env,
\&        halt, httpd, ifconfig, ifdown, ifenslave, ifplugd, ifup, init,
\&        insmod, kill, killall, killall5, linuxrc, ln, ls, lsmod, mesg,
\&        mkdir, mknod, modinfo, modprobe, mount, mv, ping, poweroff,
\&        printenv, printf, ps, pwd, reboot, rm, rmdir, rmmod, sh, sleep,
\&        stat, sync, top, udhcpc, umount, unix2dos, usleep, watch, wget
.Ve
.SH "COMMAND DESCRIPTIONS"
.IX Header "COMMAND DESCRIPTIONS"
.IP "\fBash\fR" 4
.IX Item "ash"
ash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBbash\fR" 4
.IX Item "bash"
bash [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBcat\fR" 4
.IX Item "cat"
cat [\s-1FILE\s0]...
.Sp
Concatenate FILEs and print them to stdout
.IP "\fBcp\fR" 4
.IX Item "cp"
cp [\s-1OPTIONS\s0] \s-1SOURCE\s0... \s-1DEST\s0
.Sp
Copy \s-1SOURCE\s0(s) to \s-1DEST\s0
.Sp
.Vb 9
\&        \-a      Same as \-dpR
\&        \-R,\-r   Recurse
\&        \-d,\-P   Preserve symlinks (default if \-R)
\&        \-L      Follow all symlinks
\&        \-H      Follow symlinks on command line
\&        \-p      Preserve file attributes if possible
\&        \-f      Overwrite
\&        \-i      Prompt before overwrite
\&        \-l,\-s   Create (sym)links
.Ve
.IP "\fBcut\fR" 4
.IX Item "cut"
cut [\s-1OPTIONS\s0] [\s-1FILE\s0]...
.Sp
Print selected fields from each input \s-1FILE\s0 to stdout
.Sp
.Vb 6
\&        \-b LIST Output only bytes from LIST
\&        \-c LIST Output only characters from LIST
\&        \-d CHAR Use CHAR instead of tab as the field delimiter
\&        \-s      Output only the lines containing delimiter
\&        \-f N    Print only these fields
\&        \-n      Ignored
.Ve
.IP "\fBdate\fR" 4
.IX Item "date"
date [\s-1OPTIONS\s0] [+FMT] [\s-1TIME\s0]
.Sp
Display time (using +FMT), or set time
.Sp
.Vb 10
\&        [\-s,\-\-set] TIME Set time to TIME
\&        \-u,\-\-utc        Work in UTC (don\*(Aqt convert to local time)
\&        \-R,\-\-rfc\-2822   Output RFC\-2822 compliant date string
\&        \-I[SPEC]        Output ISO\-8601 compliant date string
\&                        SPEC=\*(Aqdate\*(Aq (default) for date only,
\&                        \*(Aqhours\*(Aq, \*(Aqminutes\*(Aq, or \*(Aqseconds\*(Aq for date and
\&                        time to the indicated precision
\&        \-r,\-\-reference FILE     Display last modification time of FILE
\&        \-d,\-\-date TIME  Display TIME, not \*(Aqnow\*(Aq
\&        \-D FMT          Use FMT for \-d TIME conversion
.Ve
.Sp
Recognized \s-1TIME\s0 formats:
.Sp
.Vb 5
\&        hh:mm[:ss]
\&        [YYYY.]MM.DD\-hh:mm[:ss]
\&        YYYY\-MM\-DD hh:mm[:ss]
\&        [[[[[YY]YY]MM]DD]hh]mm[.ss]
\&        \*(Aqdate TIME\*(Aq form accepts MMDDhhmm[[YY]YY][.ss] instead
.Ve
.IP "\fBdepmod\fR" 4
.IX Item "depmod"
depmod [\-qfwrsv] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 6
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-f      Force
\&        \-w      Wait for unload
\&        \-s      Report via syslog instead of stderr
.Ve
.IP "\fBdf\fR" 4
.IX Item "df"
df [\-Pkai] [\-B \s-1SIZE\s0] [\s-1FILESYSTEM\s0]...
.Sp
Print filesystem usage statistics
.Sp
.Vb 5
\&        \-P      POSIX output format
\&        \-k      1024\-byte blocks (default)
\&        \-a      Show all filesystems
\&        \-i      Inodes
\&        \-B SIZE Blocksize
.Ve
.IP "\fBdos2unix\fR" 4
.IX Item "dos2unix"
dos2unix [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from \s-1DOS\s0 to Unix format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBecho\fR" 4
.IX Item "echo"
echo [\-neE] [\s-1ARG\s0]...
.Sp
Print the specified ARGs to stdout
.Sp
.Vb 3
\&        \-n      Suppress trailing newline
\&        \-e      Interpret backslash escapes (i.e., \et=tab)
\&        \-E      Don\*(Aqt interpret backslash escapes (default)
.Ve
.IP "\fBenv\fR" 4
.IX Item "env"
env [\-iu] [\-] [name=value]... [\s-1PROG\s0 \s-1ARGS\s0]
.Sp
Print the current environment or run \s-1PROG\s0 after setting up
the specified environment
.Sp
.Vb 2
\&        \-, \-i   Start with an empty environment
\&        \-u      Remove variable from the environment
.Ve
.IP "\fBhalt\fR" 4
.IX Item "halt"
halt [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBhttpd\fR" 4
.IX Item "httpd"
httpd [\-ifv[v]] [\-c \s-1CONFFILE\s0] [\-p [\s-1IP:\s0]PORT] [\-u USER[:GRP]] [\-r \s-1REALM\s0] [\-h \s-1HOME\s0]
or httpd \-d/\-e/\-m \s-1STRING\s0
.Sp
Listen for incoming \s-1HTTP\s0 requests
.Sp
.Vb 11
\&        \-i              Inetd mode
\&        \-f              Don\*(Aqt daemonize
\&        \-v[v]           Verbose
\&        \-p [IP:]PORT    Bind to IP:PORT (default *:80)
\&        \-u USER[:GRP]   Set uid/gid after binding to port
\&        \-r REALM        Authentication Realm for Basic Authentication
\&        \-h HOME         Home directory (default .)
\&        \-c FILE         Configuration file (default {/etc,HOME}/httpd.conf)
\&        \-m STRING       MD5 crypt STRING
\&        \-e STRING       HTML encode STRING
\&        \-d STRING       URL decode STRING
.Ve
.IP "\fBifconfig\fR" 4
.IX Item "ifconfig"
ifconfig [\-a] interface [address]
.Sp
Configure a network interface
.Sp
.Vb 8
\&        [[\-]broadcast [ADDRESS]] [[\-]pointopoint [ADDRESS]]
\&        [netmask ADDRESS] [dstaddr ADDRESS]
\&        [outfill NN] [keepalive NN]
\&        [hw ether ADDRESS] [metric NN] [mtu NN]
\&        [[\-]trailers] [[\-]arp] [[\-]allmulti]
\&        [multicast] [[\-]promisc] [txqueuelen NN] [[\-]dynamic]
\&        [mem_start NN] [io_addr NN] [irq NN]
\&        [up|down] ...
.Ve
.IP "\fBifdown\fR" 4
.IX Item "ifdown"
ifdown [\-anmvf] [\-i \s-1FILE\s0] \s-1IFACE\s0...
.Sp
.Vb 7
\&        \-a      De/configure all interfaces automatically
\&        \-i FILE Use FILE for interface definitions
\&        \-n      Print out what would happen, but don\*(Aqt do it
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force de/configuration
.Ve
.IP "\fBifenslave\fR" 4
.IX Item "ifenslave"
ifenslave [\-cdf] \s-1MASTER_IFACE\s0 \s-1SLAVE_IFACE\s0...
.Sp
Configure network interfaces for parallel routing
.Sp
.Vb 3
\&        \-c,\-\-change\-active      Change active slave
\&        \-d,\-\-detach             Remove slave interface from bonding device
\&        \-f,\-\-force              Force, even if interface is not Ethernet
.Ve
.IP "\fBifplugd\fR" 4
.IX Item "ifplugd"
ifplugd [\s-1OPTIONS\s0]
.Sp
Network interface plug detection daemon
.Sp
.Vb 10
\&        \-n              Don\*(Aqt daemonize
\&        \-s              Don\*(Aqt log to syslog
\&        \-i IFACE        Interface
\&        \-f/\-F           Treat link detection error as link down/link up
\&                        (otherwise exit on error)
\&        \-a              Don\*(Aqt up interface at each link probe
\&        \-M              Monitor creation/destruction of interface
\&                        (otherwise it must exist)
\&        \-r PROG         Script to run
\&        \-x ARG          Extra argument for script
\&        \-I              Don\*(Aqt exit on nonzero exit code from script
\&        \-p              Don\*(Aqt run "up" script on startup
\&        \-q              Don\*(Aqt run "down" script on exit
\&        \-l              Always run script on startup
\&        \-t SECS         Poll time in seconds
\&        \-u SECS         Delay before running script after link up
\&        \-d SECS         Delay after link down
\&        \-m MODE         API mode (mii, priv, ethtool, wlan, iff, auto)
\&        \-k              Kill running daemon
.Ve
.IP "\fBifup\fR" 4
.IX Item "ifup"
ifup [\-anmvf] [\-i \s-1FILE\s0] \s-1IFACE\s0...
.Sp
.Vb 7
\&        \-a      De/configure all interfaces automatically
\&        \-i FILE Use FILE for interface definitions
\&        \-n      Print out what would happen, but don\*(Aqt do it
\&                (note: doesn\*(Aqt disable mappings)
\&        \-m      Don\*(Aqt run any mappings
\&        \-v      Print out what would happen before doing it
\&        \-f      Force de/configuration
.Ve
.IP "\fBinit\fR" 4
.IX Item "init"
init
.Sp
Init is the first process started during boot. It never exits.
It (re)spawns children according to /etc/inittab.
.IP "\fBinsmod\fR" 4
.IX Item "insmod"
insmod [\-qfwrsv] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 6
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-f      Force
\&        \-w      Wait for unload
\&        \-s      Report via syslog instead of stderr
.Ve
.IP "\fBkill\fR" 4
.IX Item "kill"
kill [\-l] [\-SIG] \s-1PID\s0...
.Sp
Send a signal (default: \s-1TERM\s0) to given PIDs
.Sp
.Vb 1
\&        \-l      List all signal names and numbers
.Ve
.IP "\fBkillall\fR" 4
.IX Item "killall"
killall [\-l] [\-q] [\-SIG] \s-1PROCESS_NAME\s0...
.Sp
Send a signal (default: \s-1TERM\s0) to given processes
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-q      Don\*(Aqt complain if no processes were killed
.Ve
.IP "\fBkillall5\fR" 4
.IX Item "killall5"
killall5 [\-l] [\-SIG] [\-o \s-1PID\s0]...
.Sp
Send a signal (default: \s-1TERM\s0) to all processes outside current session
.Sp
.Vb 2
\&        \-l      List all signal names and numbers
\&        \-o PID  Don\*(Aqt signal this PID
.Ve
.IP "\fBln\fR" 4
.IX Item "ln"
ln [\s-1OPTIONS\s0] \s-1TARGET\s0... LINK|DIR
.Sp
Create a link \s-1LINK\s0 or \s-1DIR/TARGET\s0 to the specified \s-1TARGET\s0(s)
.Sp
.Vb 7
\&        \-s      Make symlinks instead of hardlinks
\&        \-f      Remove existing destinations
\&        \-n      Don\*(Aqt dereference symlinks \- treat like normal file
\&        \-b      Make a backup of the target (if exists) before link operation
\&        \-S suf  Use suffix instead of ~ when making backup files
\&        \-T      2nd arg must be a DIR
\&        \-v      Verbose
.Ve
.IP "\fBls\fR" 4
.IX Item "ls"
ls [\-1AaCxdLHRFplinserSXvctu] [\s-1FILE\s0]...
.Sp
List directory contents
.Sp
.Vb 10
\&        \-1      One column output
\&        \-a      Include entries which start with .
\&        \-A      Like \-a, but exclude . and ..
\&        \-C      List by columns
\&        \-x      List by lines
\&        \-d      List directory entries instead of contents
\&        \-L      Follow symlinks
\&        \-H      Follow symlinks on command line
\&        \-R      Recurse
\&        \-p      Append / to dir entries
\&        \-F      Append indicator (one of */=@|) to entries
\&        \-l      Long listing format
\&        \-i      List inode numbers
\&        \-n      List numeric UIDs and GIDs instead of names
\&        \-s      List allocated blocks
\&        \-e      List full date and time
\&        \-r      Sort in reverse order
\&        \-S      Sort by size
\&        \-X      Sort by extension
\&        \-v      Sort by version
\&        \-c      With \-l: sort by ctime
\&        \-t      With \-l: sort by mtime
\&        \-u      With \-l: sort by atime
\&        \-\-color[={always,never,auto}]   Control coloring
.Ve
.IP "\fBlsmod\fR" 4
.IX Item "lsmod"
lsmod [\-qfwrsv] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 6
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-f      Force
\&        \-w      Wait for unload
\&        \-s      Report via syslog instead of stderr
.Ve
.IP "\fBmesg\fR" 4
.IX Item "mesg"
mesg [y|n]
.Sp
Control write access to your terminal
	y	Allow write access to your terminal
	n	Disallow write access to your terminal
.IP "\fBmkdir\fR" 4
.IX Item "mkdir"
mkdir [\s-1OPTIONS\s0] \s-1DIRECTORY\s0...
.Sp
Create \s-1DIRECTORY\s0
.Sp
.Vb 2
\&        \-m MODE Mode
\&        \-p      No error if exists; make parent directories as needed
.Ve
.IP "\fBmknod\fR" 4
.IX Item "mknod"
mknod [\-m \s-1MODE\s0] \s-1NAME\s0 \s-1TYPE\s0 \s-1MAJOR\s0 \s-1MINOR\s0
.Sp
Create a special file (block, character, or pipe)
.Sp
.Vb 5
\&        \-m MODE Creation mode (default a=rw)
\&TYPE:
\&        b       Block device
\&        c or u  Character device
\&        p       Named pipe (MAJOR and MINOR are ignored)
.Ve
.IP "\fBmodinfo\fR" 4
.IX Item "modinfo"
modinfo [\-adlp0] [\-F keyword] \s-1MODULE\s0
.Sp
.Vb 6
\&        \-a              Shortcut for \*(Aq\-F author\*(Aq
\&        \-d              Shortcut for \*(Aq\-F description\*(Aq
\&        \-l              Shortcut for \*(Aq\-F license\*(Aq
\&        \-p              Shortcut for \*(Aq\-F parm\*(Aq
\&        \-F keyword      Keyword to look for
\&        \-0              Separate output with NULs
.Ve
.IP "\fBmodprobe\fR" 4
.IX Item "modprobe"
modprobe [\-qfwrsv] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 6
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-f      Force
\&        \-w      Wait for unload
\&        \-s      Report via syslog instead of stderr
.Ve
.IP "\fBmount\fR" 4
.IX Item "mount"
mount [\s-1OPTIONS\s0] [\-o \s-1OPTS\s0] \s-1DEVICE\s0 \s-1NODE\s0
.Sp
Mount a filesystem. Filesystem autodetection requires /proc.
.Sp
.Vb 10
\&        \-a              Mount all filesystems in fstab
\&        \-f              Dry run
\&        \-v              Verbose
\&        \-r              Read\-only mount
\&        \-w              Read\-write mount (default)
\&        \-t FSTYPE[,...] Filesystem type(s)
\&        \-O OPT          Mount only filesystems with option OPT (\-a only)
\&\-o OPT:
\&        loop            Ignored (loop devices are autodetected)
\&        [a]sync         Writes are [a]synchronous
\&        [no]atime       Disable/enable updates to inode access times
\&        [no]diratime    Disable/enable atime updates to directories
\&        [no]relatime    Disable/enable atime updates relative to modification time
\&        [no]dev         (Dis)allow use of special device files
\&        [no]exec        (Dis)allow use of executable files
\&        [no]suid        (Dis)allow set\-user\-id\-root programs
\&        [r]shared       Convert [recursively] to a shared subtree
\&        [r]slave        Convert [recursively] to a slave subtree
\&        [r]private      Convert [recursively] to a private subtree
\&        [un]bindable    Make mount point [un]able to be bind mounted
\&        [r]bind         Bind a file or directory [recursively] to another location
\&        move            Relocate an existing mount point
\&        remount         Remount a mounted filesystem, changing flags
\&        ro/rw           Same as \-r/\-w
.Ve
.Sp
There are filesystem-specific \-o flags.
.IP "\fBmv\fR" 4
.IX Item "mv"
mv [\-fin] \s-1SOURCE\s0 \s-1DEST\s0
or: mv [\-fin] \s-1SOURCE\s0... \s-1DIRECTORY\s0
.Sp
Rename \s-1SOURCE\s0 to \s-1DEST\s0, or move \s-1SOURCE\s0(s) to \s-1DIRECTORY\s0
.Sp
.Vb 3
\&        \-f      Don\*(Aqt prompt before overwriting
\&        \-i      Interactive, prompt before overwrite
\&        \-n      Don\*(Aqt overwrite an existing file
.Ve
.IP "\fBping\fR" 4
.IX Item "ping"
ping [\s-1OPTIONS\s0] \s-1HOST\s0
.Sp
Send \s-1ICMP\s0 \s-1ECHO_REQUEST\s0 packets to network hosts
.Sp
.Vb 10
\&        \-c CNT          Send only CNT pings
\&        \-s SIZE         Send SIZE data bytes in packets (default:56)
\&        \-t TTL          Set TTL
\&        \-I IFACE/IP     Use interface or IP address as source
\&        \-W SEC          Seconds to wait for the first response (default:10)
\&                        (after all \-c CNT packets are sent)
\&        \-w SEC          Seconds until ping exits (default:infinite)
\&                        (can exit earlier with \-c CNT)
\&        \-q              Quiet, only displays output at start
\&                        and when finished
.Ve
.IP "\fBpoweroff\fR" 4
.IX Item "poweroff"
poweroff [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Halt and shut off power
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBprintenv\fR" 4
.IX Item "printenv"
printenv [\s-1VARIABLE\s0]...
.Sp
Print environment VARIABLEs.
If no \s-1VARIABLE\s0 specified, print all.
.IP "\fBprintf\fR" 4
.IX Item "printf"
printf \s-1FORMAT\s0 [\s-1ARG\s0]...
.Sp
Format and print \s-1ARG\s0(s) according to \s-1FORMAT\s0 (a\-la C printf)
.IP "\fBps\fR" 4
.IX Item "ps"
ps
.Sp
Show list of processes
.Sp
.Vb 2
\&        w       Wide output
\&        l       Long output
.Ve
.IP "\fBpwd\fR" 4
.IX Item "pwd"
pwd
.Sp
Print the full filename of the current working directory
.IP "\fBreboot\fR" 4
.IX Item "reboot"
reboot [\-d \s-1DELAY\s0] [\-n] [\-f]
.Sp
Reboot the system
.Sp
.Vb 3
\&        \-d SEC  Delay interval
\&        \-n      Do not sync
\&        \-f      Force (don\*(Aqt go through init)
.Ve
.IP "\fBrm\fR" 4
.IX Item "rm"
rm [\-irf] \s-1FILE\s0...
.Sp
Remove (unlink) FILEs
.Sp
.Vb 3
\&        \-i      Always prompt before removing
\&        \-f      Never prompt
\&        \-R,\-r   Recurse
.Ve
.IP "\fBrmdir\fR" 4
.IX Item "rmdir"
rmdir [\s-1OPTIONS\s0] \s-1DIRECTORY\s0...
.Sp
Remove \s-1DIRECTORY\s0 if it is empty
.Sp
.Vb 2
\&        \-p|\-\-parents    Include parents
\&        \-\-ignore\-fail\-on\-non\-empty
.Ve
.IP "\fBrmmod\fR" 4
.IX Item "rmmod"
rmmod [\-qfwrsv] \s-1MODULE\s0 [symbol=value]...
.Sp
.Vb 6
\&        \-r      Remove MODULE (stacks) or do autoclean
\&        \-q      Quiet
\&        \-v      Verbose
\&        \-f      Force
\&        \-w      Wait for unload
\&        \-s      Report via syslog instead of stderr
.Ve
.IP "\fBsh\fR" 4
.IX Item "sh"
sh [\-/+OPTIONS] [\-/+o \s-1OPT\s0]... [\-c '\s-1SCRIPT\s0' [\s-1ARG0\s0 [\s-1ARGS\s0]] / \s-1FILE\s0 [\s-1ARGS\s0]]
.Sp
Unix shell interpreter
.IP "\fBsleep\fR" 4
.IX Item "sleep"
sleep [N]...
.Sp
Pause for a time equal to the total of the args given, where each arg can
have an optional suffix of (s)econds, (m)inutes, (h)ours, or (d)ays
.IP "\fBstat\fR" 4
.IX Item "stat"
stat [\s-1OPTIONS\s0] \s-1FILE\s0...
.Sp
Display file (default) or filesystem status
.Sp
.Vb 4
\&        \-c fmt  Use the specified format
\&        \-f      Display filesystem status
\&        \-L      Follow links
\&        \-t      Display info in terse form
.Ve
.Sp
Valid format sequences for files:
.Sp
.Vb 10
\& %a     Access rights in octal
\& %A     Access rights in human readable form
\& %b     Number of blocks allocated (see %B)
\& %B     The size in bytes of each block reported by %b
\& %d     Device number in decimal
\& %D     Device number in hex
\& %f     Raw mode in hex
\& %F     File type
\& %g     Group ID of owner
\& %G     Group name of owner
\& %h     Number of hard links
\& %i     Inode number
\& %n     File name
\& %N     File name, with \-> TARGET if symlink
\& %o     I/O block size
\& %s     Total size, in bytes
\& %t     Major device type in hex
\& %T     Minor device type in hex
\& %u     User ID of owner
\& %U     User name of owner
\& %x     Time of last access
\& %X     Time of last access as seconds since Epoch
\& %y     Time of last modification
\& %Y     Time of last modification as seconds since Epoch
\& %z     Time of last change
\& %Z     Time of last change as seconds since Epoch
.Ve
.Sp
Valid format sequences for file systems:
.Sp
.Vb 12
\& %a     Free blocks available to non\-superuser
\& %b     Total data blocks in file system
\& %c     Total file nodes in file system
\& %d     Free file nodes in file system
\& %f     Free blocks in file system
\& %i     File System ID in hex
\& %l     Maximum length of filenames
\& %n     File name
\& %s     Block size (for faster transfer)
\& %S     Fundamental block size (for block counts)
\& %t     Type in hex
\& %T     Type in human readable form
.Ve
.IP "\fBsync\fR" 4
.IX Item "sync"
sync
.Sp
Write all buffered blocks to disk
.IP "\fBtop\fR" 4
.IX Item "top"
top [\-b] [\-nCOUNT] [\-dSECONDS] [\-m]
.Sp
Provide a view of process activity in real time.
Read the status of all processes from /proc each \s-1SECONDS\s0
and display a screenful of them.
Keys:
.Sp
.Vb 5
\&        N/M/P/T: show CPU usage, sort by pid/mem/cpu/time
\&        S: show memory
\&        R: reverse sort
\&        1: toggle SMP
\&        Q,^C: exit
.Ve
.Sp
Options:
.Sp
.Vb 4
\&        \-b      Batch mode
\&        \-n N    Exit after N iterations
\&        \-d N    Delay between updates
\&        \-m      Same as \*(Aqs\*(Aq key
.Ve
.IP "\fBudhcpc\fR" 4
.IX Item "udhcpc"
udhcpc [\-fbqvaRB] [\-t N] [\-T \s-1SEC\s0] [\-A SEC/\-n]
	[\-i \s-1IFACE\s0] [\-s \s-1PROG\s0] [\-p \s-1PIDFILE\s0]
	[\-oC] [\-r \s-1IP\s0] [\-V \s-1VENDOR\s0] [\-F \s-1NAME\s0] [\-x \s-1OPT:VAL\s0]... [\-O \s-1OPT\s0]...
.Sp
.Vb 10
\&        \-i,\-\-interface IFACE    Interface to use (default eth0)
\&        \-s,\-\-script PROG        Run PROG at DHCP events (default /usr/share/udhcpc/default.script)
\&        \-p,\-\-pidfile FILE       Create pidfile
\&        \-B,\-\-broadcast          Request broadcast replies
\&        \-t,\-\-retries N          Send up to N discover packets (default 3)
\&        \-T,\-\-timeout SEC        Pause between packets (default 3)
\&        \-A,\-\-tryagain SEC       Wait if lease is not obtained (default 20)
\&        \-n,\-\-now                Exit if lease is not obtained
\&        \-q,\-\-quit               Exit after obtaining lease
\&        \-R,\-\-release            Release IP on exit
\&        \-f,\-\-foreground         Run in foreground
\&        \-b,\-\-background         Background if lease is not obtained
\&        \-S,\-\-syslog             Log to syslog too
\&        \-a,\-\-arping             Use arping to validate offered address
\&        \-r,\-\-request IP         Request this IP address
\&        \-o,\-\-no\-default\-options Don\*(Aqt request any options (unless \-O is given)
\&        \-O,\-\-request\-option OPT Request option OPT from server (cumulative)
\&        \-x OPT:VAL              Include option OPT in sent packets (cumulative)
\&                                Examples of string, numeric, and hex byte opts:
\&                                \-x hostname:bbox \- option 12
\&                                \-x lease:3600 \- option 51 (lease time)
\&                                \-x 0x3d:0100BEEFC0FFEE \- option 61 (client id)
\&        \-F,\-\-fqdn NAME          Ask server to update DNS mapping for NAME
\&        \-V,\-\-vendorclass VENDOR Vendor identifier (default \*(Aqudhcp VERSION\*(Aq)
\&        \-C,\-\-clientid\-none      Don\*(Aqt send MAC as client identifier
\&        \-v                      Verbose
\&Signals:
\&
\&        USR1    Renew lease
\&        USR2    Release lease
.Ve
.IP "\fBumount\fR" 4
.IX Item "umount"
umount [\s-1OPTIONS\s0] FILESYSTEM|DIRECTORY
.Sp
Unmount file systems
.Sp
.Vb 5
\&        \-a      Unmount all file systems
\&        \-r      Try to remount devices as read\-only if mount is busy
\&        \-l      Lazy umount (detach filesystem)
\&        \-f      Force umount (i.e., unreachable NFS server)
\&        \-D      Don\*(Aqt free loop device even if it has been used
.Ve
.IP "\fBunix2dos\fR" 4
.IX Item "unix2dos"
unix2dos [\-ud] [\s-1FILE\s0]
.Sp
Convert \s-1FILE\s0 in-place from Unix to \s-1DOS\s0 format.
When no file is given, use stdin/stdout.
.Sp
.Vb 2
\&        \-u      dos2unix
\&        \-d      unix2dos
.Ve
.IP "\fBusleep\fR" 4
.IX Item "usleep"
usleep N
.Sp
Pause for N microseconds
.IP "\fBwatch\fR" 4
.IX Item "watch"
watch [\-n \s-1SEC\s0] [\-t] \s-1PROG\s0 \s-1ARGS\s0
.Sp
Run \s-1PROG\s0 periodically
.Sp
.Vb 2
\&        \-n      Loop period in seconds (default 2)
\&        \-t      Don\*(Aqt print header
.Ve
.IP "\fBwget\fR" 4
.IX Item "wget"
wget [\-c|\-\-continue] [\-s|\-\-spider] [\-q|\-\-quiet] [\-O|\-\-output\-document \s-1FILE\s0]
	[\-\-header 'header: value'] [\-Y|\-\-proxy on/off] [\-P \s-1DIR\s0]
	[\-U|\-\-user\-agent \s-1AGENT\s0] [\-T \s-1SEC\s0] \s-1URL\s0...
.Sp
Retrieve files via \s-1HTTP\s0 or \s-1FTP\s0
.Sp
.Vb 8
\&        \-s      Spider mode \- only check file existence
\&        \-c      Continue retrieval of aborted transfer
\&        \-q      Quiet
\&        \-P DIR  Save to DIR (default .)
\&        \-T SEC  Network read timeout is SEC seconds
\&        \-O FILE Save to FILE (\*(Aq\-\*(Aq for stdout)
\&        \-U STR  Use STR for User\-Agent header
\&        \-Y      Use proxy (\*(Aqon\*(Aq or \*(Aqoff\*(Aq)
.Ve
.SH "LIBC NSS"
.IX Header "LIBC NSS"
\&\s-1GNU\s0 Libc (glibc) uses the Name Service Switch (\s-1NSS\s0) to configure the behavior
of the C library for the local environment, and to configure how it reads
system data, such as passwords and group information.  This is implemented
using an /etc/nsswitch.conf configuration file, and using one or more of the
/lib/libnss_* libraries.  BusyBox tries to avoid using any libc calls that make
use of \s-1NSS\s0.  Some applets however, such as login and su, will use libc functions
that require \s-1NSS\s0.
.PP
If you enable \s-1CONFIG_USE_BB_PWD_GRP\s0, BusyBox will use internal functions to
directly access the /etc/passwd, /etc/group, and /etc/shadow files without
using \s-1NSS\s0.  This may allow you to run your system without the need for
installing any of the \s-1NSS\s0 configuration files and libraries.
.PP
When used with glibc, the BusyBox 'networking' applets will similarly require
that you install at least some of the glibc \s-1NSS\s0 stuff (in particular,
/etc/nsswitch.conf, /lib/libnss_dns*, /lib/libnss_files*, and /lib/libresolv*).
.PP
Shameless Plug: As an alternative, one could use a C library such as uClibc.  In
addition to making your system significantly smaller, uClibc does not require the
use of any \s-1NSS\s0 support files or libraries.
.SH "MAINTAINER"
.IX Header "MAINTAINER"
Denis Vlasenko <vda.linux@googlemail.com>
.SH "AUTHORS"
.IX Header "AUTHORS"
The following people have contributed code to BusyBox whether they know it or
not.  If you have written code included in BusyBox, you should probably be
listed here so you can obtain your bit of eternal glory.  If you should be
listed here, or the description of what you have done needs more detail, or is
incorrect, please send in an update.
.PP
Emanuele Aina <emanuele.aina@tiscali.it>
    run-parts
.PP
Erik Andersen <andersen@codepoet.org>
.PP
.Vb 4
\&    Tons of new stuff, major rewrite of most of the
\&    core apps, tons of new apps as noted in header files.
\&    Lots of tedious effort writing these boring docs that
\&    nobody is going to actually read.
.Ve
.PP
Laurence Anderson <l.d.anderson@warwick.ac.uk>
.PP
.Vb 1
\&    rpm2cpio, unzip, get_header_cpio, read_gz interface, rpm
.Ve
.PP
Jeff Angielski <jeff@theptrgroup.com>
.PP
.Vb 1
\&    ftpput, ftpget
.Ve
.PP
Edward Betts <edward@debian.org>
.PP
.Vb 1
\&    expr, hostid, logname, whoami
.Ve
.PP
John Beppu <beppu@codepoet.org>
.PP
.Vb 1
\&    du, nslookup, sort
.Ve
.PP
Brian Candler <B.Candler@pobox.com>
.PP
.Vb 1
\&    tiny\-ls(ls)
.Ve
.PP
Randolph Chung <tausq@debian.org>
.PP
.Vb 1
\&    fbset, ping, hostname
.Ve
.PP
Dave Cinege <dcinege@psychosis.com>
.PP
.Vb 2
\&    more(v2), makedevs, dutmp, modularization, auto links file,
\&    various fixes, Linux Router Project maintenance
.Ve
.PP
Jordan Crouse <jordan@cosmicpenguin.net>
.PP
.Vb 1
\&    ipcalc
.Ve
.PP
Magnus Damm <damm@opensource.se>
.PP
.Vb 1
\&    tftp client insmod powerpc support
.Ve
.PP
Larry Doolittle <ldoolitt@recycle.lbl.gov>
.PP
.Vb 1
\&    pristine source directory compilation, lots of patches and fixes.
.Ve
.PP
Glenn Engel <glenne@engel.org>
.PP
.Vb 1
\&    httpd
.Ve
.PP
Gennady Feldman <gfeldman@gena01.com>
.PP
.Vb 2
\&    Sysklogd (single threaded syslogd, IPC Circular buffer support,
\&    logread), various fixes.
.Ve
.PP
Karl M. Hegbloom <karlheg@debian.org>
.PP
.Vb 1
\&    cp_mv.c, the test suite, various fixes to utility.c, &c.
.Ve
.PP
Daniel Jacobowitz <dan@debian.org>
.PP
.Vb 1
\&    mktemp.c
.Ve
.PP
Matt Kraai <kraai@alumni.cmu.edu>
.PP
.Vb 1
\&    documentation, bugfixes, test suite
.Ve
.PP
Stephan Linz <linz@li\-pro.net>
.PP
.Vb 1
\&    ipcalc, Red Hat equivalence
.Ve
.PP
John Lombardo <john@deltanet.com>
.PP
.Vb 1
\&    tr
.Ve
.PP
Glenn McGrath <bug1@iinet.net.au>
.PP
.Vb 3
\&    Common unarchiving code and unarchiving applets, ifupdown, ftpgetput,
\&    nameif, sed, patch, fold, install, uudecode.
\&    Various bugfixes, review and apply numerous patches.
.Ve
.PP
Manuel Novoa \s-1III\s0 <mjn3@codepoet.org>
.PP
.Vb 3
\&    cat, head, mkfifo, mknod, rmdir, sleep, tee, tty, uniq, usleep, wc, yes,
\&    mesg, vconfig, make_directory, parse_mode, dirname, mode_string,
\&    get_last_path_component, simplify_path, and a number trivial libbb routines
\&
\&    also bug fixes, partial rewrites, and size optimizations in
\&    ash, basename, cal, cmp, cp, df, du, echo, env, ln, logname, md5sum, mkdir,
\&    mv, realpath, rm, sort, tail, touch, uname, watch, arith, human_readable,
\&    interface, dutmp, ifconfig, route
.Ve
.PP
Vladimir Oleynik <dzo@simtreas.ru>
.PP
.Vb 4
\&    cmdedit; xargs(current), httpd(current);
\&    ports: ash, crond, fdisk, inetd, stty, traceroute, top;
\&    locale, various fixes
\&    and irreconcilable critic of everything not perfect.
.Ve
.PP
Bruce Perens <bruce@pixar.com>
.PP
.Vb 2
\&    Original author of BusyBox in 1995, 1996. Some of his code can
\&    still be found hiding here and there...
.Ve
.PP
Tim Riker <Tim@Rikers.org>
.PP
.Vb 1
\&    bug fixes, member of fan club
.Ve
.PP
Kent Robotti <robotti@metconnect.com>
.PP
.Vb 1
\&    reset, tons and tons of bug reports and patches.
.Ve
.PP
Chip Rosenthal <chip@unicom.com>, <crosenth@covad.com>
.PP
.Vb 1
\&    wget \- Contributed by permission of Covad Communications
.Ve
.PP
Pavel Roskin <proski@gnu.org>
.PP
.Vb 1
\&    Lots of bugs fixes and patches.
.Ve
.PP
Gyepi Sam <gyepi@praxis\-sw.com>
.PP
.Vb 1
\&    Remote logging feature for syslogd
.Ve
.PP
Linus Torvalds <torvalds@transmeta.com>
.PP
.Vb 1
\&    mkswap, fsck.minix, mkfs.minix
.Ve
.PP
Mark Whitley <markw@codepoet.org>
.PP
.Vb 2
\&    grep, sed, cut, xargs(previous),
\&    style\-guide, new\-applet\-HOWTO, bug fixes, etc.
.Ve
.PP
Charles P. Wright <cpwright@villagenet.com>
.PP
.Vb 1
\&    gzip, mini\-netcat(nc)
.Ve
.PP
Enrique Zanardi <ezanardi@ull.es>
.PP
.Vb 1
\&    tarcat (since removed), loadkmap, various fixes, Debian maintenance
.Ve
.PP
Tito Ragusa <farmatito@tiscali.it>
.PP
.Vb 1
\&    devfsd and size optimizations in strings, openvt and deallocvt.
.Ve
.PP
Paul Fox <pgf@foxharp.boston.ma.us>
.PP
.Vb 1
\&    vi editing mode for ash, various other patches/fixes
.Ve
.PP
Roberto A. Foglietta <me@roberto.foglietta.name>
.PP
.Vb 1
\&    port: dnsd
.Ve
.PP
Bernhard Reutner-Fischer <rep.dot.nop@gmail.com>
.PP
.Vb 1
\&    misc
.Ve
.PP
Mike Frysinger <vapier@gentoo.org>
.PP
.Vb 1
\&    initial e2fsprogs, printenv, setarch, sum, misc
.Ve
.PP
Jie Zhang <jie.zhang@analog.com>
.PP
.Vb 1
\&    fixed two bugs in msh and hush (exitcode of killed processes)
.Ve

/*
 *  lowlevel_init - Low level init code for NUC900 MCUs
 *
 *  Copyright (c) 2012 Nuvoton Technology Corp.
 *
 * See file CREDITS for list of people who contributed to this
 * project.
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License as
 * published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place, Suite 330, Boston,
 * MA 02111-1307 USA
 */

/* Set up PLL, detect SDRAM, remmap */

#include <config.h>

#define ROM_Start       0xA0000000   // Base address of ROM after remapping
#define GTEMP1          0xB0000034   // general temp register
#define CLK_Sel         0xB0000204
#define CLK_Div         0xB0000208
#define PLL_Con0        0xB000020C
#define Clk_Skew        0xB0001700   // Clock skew control register
#define EBI_Ctrl        0xB0001000   // EBI Controle register
#define ROM_Cfg         0xB0001004   // Boot ROM config register
#define SDRAM_config0   0xB0001008   // SDCONF0
#define AIC_MDCR        0xB8002124   // AIC Mask Disable Control Register



.globl  lowlevel_init
lowlevel_init:
999:
                b       999b
                // Disable Interrupt, This is for safe ...
                ldr     r0, =AIC_MDCR
                ldr     r1, =0xFFFFFFFF
                str     r1, [r0]
                mrs     r0, CPSR
                orr     r0, r0, #0xC0
                msr     CPSR_c, r0

                // Adjust boot rom access timing, IBR gave it a safer value
                ldr     r0, =ROM_Cfg
                ldr     r0, [r0]
                ldr     r1, =0xFFFFF00F
                and     r1, r1, r0
                ldr     r0, =0x80
                orr     r1, r1, r0
                ldr     r0, =ROM_Cfg
                str     r1, [r0]

                // Let's speed up. Enable PLL.
                ldr     r0, =CLK_Sel
                ldr     r1, =0xFFF
                str     r1, [r0]        // select external clk as CPU clock
                ldr     r0, =CLK_Div
                ldr     r1, =0x05000000
                str     r1, [r0]        // CPU:AHB:APB = 1:2:4
                ldr     r0, =PLL_Con0
                ldr     r1, =0x4F24
                str     r1, [r0]        // 200 MHz

                /* let PLL stable */
                mov     r2, #0x3000
1:
                subs    r2, r2, #0x1
                bne     1b

                ldr     r0, =CLK_Sel
                ldr     r1, =0xFFC
                str     r1, [r0]        // select PLL as CPU clock

                /* another small delay here */
                mov     r2, #0x400
2:
                subs    r2, r2, #0x1
                bne     2b


                //Check if the system had been initialized
                ldr     r0, =SDRAM_config0
                ldr     r0, [r0]
                ldr     r1, =0x800
                cmp     r0, r1
                bne     0f

                //Configure the System Manger to remap the flash
                //The Memory Bank Control Registers must be set using store multpiles
                //Set up a stack in internal sram to preserve the original register contents

                ldr     r2, =remap_temp
                mov     r1, pc
                ldr     r3, =remap_EndSysMapJump
remap_temp:
                bic     r2, r2, #0x80000000
                bic     r3, r3, #0x80000000
                mov     r7, #0
                mov     r4, lr
                cmp     r2, r1
                ldrgt   r7, =ROM_Start
                addgt   r4, r4, r7
                bic     r7, r7, #0x80000000
                bic     r4, r4, #0x80000000

                sub     r3, r3, r2
                add     r1, r1, r3
                add     r7, r7, r1
                add     r4, r4, r1
                orr     r7, r7, #0x80000000
                orr     r4, r4, #0x80000000
                ldr     r0, =GTEMP1
                str     r4, [r0]

                // Load in the target values into the control registers
                adrl    r0, remap_SystemInitData
                ldmia   r0, {r1-r6}
                ldr     r0, =EBI_Ctrl

                // Now run critical jump code
                stmia   r0, {r1-r6}
                mov     pc, r7
remap_EndSysMapJump:


                // disable SDRAM bank0 and bank1 for safty
                ldr      r1, =0xb0001008
                mov      r4,#0
                str      r4,[r1, #0]
                str      r4,[r1, #4]

                // initial values
                ldr      r11,=0x000090ff
                ldr      r7, =0x55aaff00
                mov      r3,#0
                mov      r6,#1

Dram_Auto_Check :
                str      r11,[r1,r3,lsl #2] // 64Mx8, 32bit

Dram_DataWidth_Check:
                ldr      r2, =0x5a31a564
                str      r2,[r4,#0]
                ldr      r0, =0x11227799
                str      r0,[r4,#4]

                ldr      r0,[r4,#0]
                cmp      r0,r2

Dram_DataWidth_32:
                moveq    r2,#0x60
                moveq    r0,#0
                beq              Dram_Type_Check

                ldr      r14,=0x0000a564
                mov      r2,r0,lsl #16
                cmp      r14,r2,lsr #16
                bne      Dram_DataWidth_Temp // 0x8118

Dram_DataWidth_16:
                mov      r2,#0x40
                mov      r0,#1

Dram_Type_Check:
                //64M x 8
                orr      r14,r2,#0x9000
                orr      r14,r14,#0x9f
                b        Dram_Check_Start // 0x8138

Dram_DataWidth_Temp:
                and      r0,r0,#0xff
                cmp      r0,#0x64

Dram_Not_EXIST:
                movne    r0,#0
                movne    r14,#0
                bne      Sdram_Type_Found

                ldr      r14,=0x000090be

Dram_DataWidth_8        :
                mov      r2,#0x20
                mov      r0,#2

Dram_Check_Start:
                str      r14,[r1,r3,lsl #2]
                str      r4,[r4,#0]
                rsb      r14,r0,#0xb
                mov      r14,r6,lsl r14
                str      r7,[r14,#0]
                ldr      r10,[r4,#0]
                cmp      r10,r7
                bne      SDRAM_COMPBK_4

                str      r4,[r4,#0]


SDRAM_COMPBK_2:
                // 2M x 8
                rsb      r14,r0,#3
                orr      r14,r14,r2
                orr      r14,r14,#0x9000
                orr      r14,r14,#8
                str      r14,[r1,r3,lsl #2]

                // check A10
                rsb      r10,r0,#0xa
                mov      r10,r6,lsl r10
                str      r7,[r10,#0]
                ldr      r10,[r4,#0]
                cmp      r10,r7
                bne      Sdram_2Mx8
                str      r4,[r4,#0]

Sdram_1Mx16:
                cmp      r0,#2
                moveq    r0,#1
                rsb      r14,r0,#2
                orr      r2,r14,r2
                orr      r14,r2,#0x9000
                mov      r2,#0x400000
                b        Sdram_size_shift


Sdram_2Mx8:
                mov      r2,#0x800000
                b        Sdram_size_shift

SDRAM_COMPBK_4  :
                str      r4,[r14,#0]

                // Check A24
                rsb      r14,r0,#0x18
                mov      r14,r6,lsl r14
                str      r7,[r14,#0]

                mov      r10,#0
                ldr      r10,[r10,#0]
                cmp      r10,r7
                bne              Sdram_RAS13

                str      r4,[r4,#0]

                // Check A23
                rsb      r14,r0,#0x17
                mov      r14,r6,lsl r14
                str      r7,[r14,#0]
                ldr      r14,[r4,#0]
                cmp      r14,r7
                streq    r4,[r4,#0]

Sdram_2Mx32     :
                rsbeq    r14,r0,#3
                orreq    r2,r14,r2
                orreq    r14,r2,#0x8000
                orreq    r14,r14,#0x1080
                beq      Sdram_2Mx8

Sdram_RAS12:
                // 16Mx8
                rsb      r14,r0,#6
                orr      r14,r14,r2
                orr      r14,r14,#0x9000
                orr      r14,r14,#0x90
                str      r14,[r1,r3,lsl #2]

                // check A25
                rsb      r10,r0,#0x19
                mov      r10,r6,lsl r10
                str      r7,[r10,#0]
                ldr      r10,[r4,#0]
                cmp      r10,r7
                bne              Sdram_16Mx8

                str      r4,[r4,#0]

                // check A10
                rsb      r14,r0,#0xa
                mov      r14,r6,lsl r14
                str      r7,[r14,#0]
                ldr      r14,[r4,#0]
                cmp      r14,r7

Sdram_8Mx16:
                rsbne    r14,r0,#5
                streq    r4,[r4,#0]

Sdram_4Mx32:
                rsbeq    r14,r0,#4
                orr      r2,r14,r2
                orrne    r14,r2,#0x9000
                orreq    r14,r2,#0x8000
                orreq    r14,r14,#0x1080
                moveq    r2,#0x1000000

                orrne    r14,r14,#0x88
                movne    r2,#0x2000000
                b               Sdram_size_shift

Sdram_16Mx8:
                mov     r2,#0x4000000
                b               Sdram_size_shift

Sdram_RAS13:
                str      r4,[r14,#0]
                cmp      r2,#0x60
                streq    r11,[r1,#0]
                ldreq    r14,=0x100090ff
                streq    r14,[r1,#4]

                //check A27
                rsb      r14,r0,#0x1b
                mov      r14,r6,lsl r14
                str      r7,[r14,#0]
                ldr      r14,[r4,#0]
                cmp      r14,r7
                bne      Sdram_64Mx8

                str      r4,[r4,#0]

                str      r4,[r1,#0]  // added on 2008/08/18 to fix RAS13 detection problem
                str      r4,[r1,#4]

                // 32Mx8
                rsb      r14,r0,#7
                orr      r14,r14,r2
                orr      r14,r14,#0x9000
                orr      r14,r14,#0x90
                str      r14,[r1,r3,lsl #2]

                // check A26
                rsb      r10,r0,#0x1a
                mov      r10,r6,lsl r10
                str      r7,[r10,#0]
                ldr      r10,[r4,#0]
                cmp      r10,r7

                streq    r4,[r4,#0]


Sdram_16Mx16    :
                rsbeq    r14,r0,#6
                orreq    r2,r14,r2
                orreq    r14,r2,#0x9000
                orreq    r14,r14,#0x88
                beq              Sdram_16Mx8

Sdram_32Mx8:
                mov      r2,#0x8000000

Sdram_size_shift:
                mov      r0,r2,lsr r0
                b        Sdram_Type_Found

Sdram_64Mx8:
                cmp      r2,#0x20
                orrne    r14,r2,#0x9000
                ldreq    r14,=0x000090be
                movne    r0,#0x8000000
                moveq    r0,#0x4000000
                orrne    r14,r14,#0x9f


Sdram_Type_Found:
                str      r4,[r1,#0]
                str      r4,[r1,#4]

                cmp      r3,#0

Sdram_Bank1_Result      :
                movne    r5,r14
                movne    r9,r0

Sdram_Bank0_Result:
                moveq    r8,r14
                moveq    r12,r0

Sdram_Next_Bank         :
                // Goto bank 2 test if necessary
                add      r3,r3,#1
                cmp      r3,#1
                ble      Dram_Auto_Check

Sdram_Bank0_SetUp:
                cmp      r12,#0 // SDRAM bank 0 size
                strne    r8,[r1,#0]

Sdram_Bank1_SetUp:
                cmp      r9,#0 // SDRAM bank 1 size
                beq              Dram_256MB_Type

                cmp      r12,#0
Sdram_Bank1_Only        :
                streq    r5,[r1,#4]

Sdram_Bank1_After_Bank0:
                orrne    r0,r5,r12,lsl #1
                strne    r0,[r1,#4]

Dram_256MB_Type:
                // check bank 0
                ldr      r2,[r1,#0]
                mov      r0,#0xff
                and      r2,r2,#0xff
                cmp      r2,r0
                ldreq    r2,[r1,#4]
                cmpeq    r2,#0
                orreq    r2,r0,#0x10000000
                orreq    r2,r2,#0x9000
                streq    r2,[r1,#4]

                // check bank1
                ldr      r2,[r1,#4]
                and      r2,r2,#0xff
                cmp      r2,r0
                ldreq    r2,[r1,#0]
                cmpeq    r2,#0
                orreq    r2,r0,#0x9000
                streq    r2,[r1,#0]
                orreq    r0,r0,#0x10000000
                orreq    r0,r0,#0x9000
                streq    r0,[r1,#4]

Dram_Type_Check_End:

                /* go back to our caller */
                ldr     r0, =GTEMP1
                ldr     lr, [r0]
0:
                mov     pc, lr

        .ltorg

remap_SystemInitData:
        .word   0x000530C1      //EBICON : not need to change.
        .word   0x40040084      //ROMCFG
        .word   0x000090CC      //SDCONF0(SDRAM) -  2M (1Mx16):0x00009041
        .word   0x020090CC      //SDCONF1 - The same as SDCONF0 with proper base address
        .word   0x0000015B      //SDTIME0 - not need to change
        .word   0x0000015B      //SDTIME1 - not need to change



